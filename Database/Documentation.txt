# Database Server Project Setup

This document provides step-by-step instructions to set up and run the Database Server project, including `DatabaseServer`, `AuthServer`, and `Client` modules. Follow these instructions carefully to configure the environment and execute the code.

---

## Prerequisites

Ensure you have the following installed:
1. Python 3.8+
2. PostgreSQL 12+
3. Virtualenv (optional but recommended)

---

## Steps to Set Up the Environment

### 1. Install PostgreSQL

Install PostgreSQL using the following command:
```bash
sudo apt install postgresql
```

### 2. Configure PostgreSQL Database

1. Switch to the PostgreSQL user:
   ```bash
   sudo -i -u postgres
   ```

2. Open the PostgreSQL interactive terminal:
   ```bash
   psql
   ```

3. Create a new database:
   ```sql
   CREATE DATABASE your_database_name;
   ```

4. Set a password for the PostgreSQL user:
   ```sql
   ALTER USER postgres PASSWORD 'ahmed';
   ```

5. Create a table named `authentication`:
   ```sql
   CREATE TABLE authentication (
       username VARCHAR(50) PRIMARY KEY,
       display_name VARCHAR(100),
       password VARCHAR(100),
       blocked BOOLEAN DEFAULT FALSE
   );
   ```

6. Exit the PostgreSQL terminal:
   ```sql
   \q
   ```

7. Start the PostgreSQL service (if not already running):
   ```bash
   sudo systemctl start postgresql
   ```

---

### 3. Set Up the Python Environment

1. Create a virtual environment (optional but recommended):
   ```bash
   python3 -m venv venv
   source venv/bin/activate
   ```

2. Install required Python libraries:
   ```bash
   pip install -r requirements.txt
   ```

3. Create a `.env` file in the project directory with the following content but we already have it:
   ```env
   DB_NAME=your_database_name
   DB_USER=postgres
   DB_PASSWORD=ahmed
   DB_HOST=localhost
   DB_PORT=5432
   ```

---

### 4. Python Requirements File

Create a `requirements.txt` file with the following content:
```text
psycopg2-binary
python-dotenv
```

---

### 5. Running the Code

1. Start the Database Server:
   ```bash
   python DatabaseServer.py
   ```

2. Start the Auth Server:
   ```bash
   python AuthServer.py
   ```

3. Start the Client:
   ```bash
   python Client.py
   ```

---

### 6. Access PostgreSQL Database

To manually access the PostgreSQL database:
1. Switch to the PostgreSQL user:
   ```bash
   sudo -i -u postgres
   ```

2. Open the PostgreSQL interactive terminal:
   ```bash
   psql
   ```

3. Use the following commands to interact with the database:
   - Select the database:
     ```sql
     \c your_database_name
     ```
   - View the `authentication` table:
     ```sql
     SELECT * FROM authentication;
     ```
   - Exit the terminal:
     ```sql
     \q
     ```

---

### Notes
- Ensure all Python files (`DatabaseServer.py`, `AuthServer.py`, `Client.py`) are in the same directory.
- Modify the `.env` file if database credentials or configuration changes.
- If you encounter issues, verify the PostgreSQL service is running and the database credentials are correct.

---

